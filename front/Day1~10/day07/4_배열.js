/*
    - 변수/상수 : 데이터 1개 저장할 수 있는 공간/메모리/상자
    - JS 데이터 종류
        1. 문자 " ", ' ', ` ` 
        2. 숫자
        3. 논리(boolean)
        4. 배열 : [ 데이터1, 데이터2, 데이터3 ]
    
    - 배열
        - 순서대로 번호가 붙은 데이터들이 연속적인 형태로 구성된 구조
        - 순서대로 붙은 번호 : 첨자 / index, 중복된 데이터 식별
        -      [1,2,1,1,2,4] 
        - index 0 1 2 3 4 5
        - 인덱스 개수/길이 : 데이터 개수의 n-1개
    
        - 배열 호출
            - 전체 호출: 변수명
            - 특정 데이터 호출: 변수명[인덱스번호]
        - 배열 수정
            - 전체 수정: 변수명 = [새로운 배열]
            - 특정 인덱스 내 데이터 수정 = 변수명[인덱스번호] = 새로운데이터
        - 배열 내 데이터 추가
            - 변수명.push
        - 배열 내 특정 데이터 삭제
            - 변수명.splice(인덱스, 1) : 특정 인덱스부터 1개 삭제
            - 변수명.splice(인덱스, 0, '새로운데이터') : 특정 인덱스에 새로운 데이터 삽입 (한칸씩 밀려남)
        - 배열 내 데이터의 인덱스 찾기
            - 변수명.indexOf(찾을데이터) : 있으면 인덱스 번호 반환, 없으면 -1

*/

// 1. 배열 선언/만들기 : 데이터 여러개 저장하기
['사과','바나나','포도']

// 2. 선언된 데이터 출력
console.log(['사과','바나나','포도'])

// 3. 배열을 변수/상수 저장
let 과일상자변수 = ['사과','바나나','포도']

// 4. 배열을 가지고 있는 변수 호출
console.log(과일상자변수)
// 4-1. 배열이 가지고 있는 특정 위치의 데이터 호출 : 변수[인덱스번호]
console.log(과일상자변수[0])
console.log(과일상자변수[3]) // 없는 위치/인덱스, undefined

// 5. 배열 수정
    // 변수명 = 새 배열
과일상자변수 = ['사과','바나나']
// 5-1. 배열 내 특정 데이터만 수정
과일상자변수[0] = '포도';
과일상자변수[2] = '멜론';
console.log(과일상자변수); // ['포도','바나나','멜론']

// 6. 배열에 요소/데이터 추가
    // 변수명.push(데이터)
과일상자변수.push('체리');
console.log(과일상자변수); // ['포도','바나나','멜론','체리']

// 7. 배열에 요소/데이터 삭제
    // 변수명.splice(삭제할인덱스, 개수)
과일상자변수.splice(0,2,'딸기', '배'); // 0번 인덱스에서 2개 삭제, '딸기', '배' 접합
console.log(과일상자변수); // ['딸기','배','멜론','체리']

// 8. 데이터의 인덱스 찾기
    // 변수명.indexof(찾을 데이터) : 있으면 인덱스 호출, 없으면 -1
console.log(과일상자변수.indexOf('배')); // 1
    // 응용
let 삭제할인덱스 = 과일상자변수.indexOf('멜론') // 2
과일상자변수.splice(삭제할인덱스, 2);
console.log(과일상자변수); // ['딸기','배']
console.log(과일상자변수[0][1]); // '기'
